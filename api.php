<?php
// Set the content type to HTML for clean browser display.
header('Content-Type: text/html');

// 1. Define allowed protocols
$allowedProtocols = ['i2c', 'uart', 'tcp'];

// Check if the 'protocol' parameter was provided   
if (isset($_GET['protocol']) && isset($_GET['projectName']) && isset($_GET['eventName'])) {
    $protocol = $_GET['protocol'];
    $projectName = $_GET['projectName'];
    $eventName = $_GET['eventName'];
    $flagName = $eventName . "_trigger_flag";

    //validate protocol and prjectName variables
    if (!preg_match('/^[a-zA-Z_][a-zA-Z0-9_]*$/', $projectName) || !preg_match('/^[a-zA-Z_][a-zA-Z0-9_]*$/', $eventName)) {
        http_response_code(400);
        echo "Error: 'projectName' and 'eventName' must be valid C identifiers (letters, numbers, underscores, and not start with a number).";
        exit;
    }
    // 3. Validate if the provided protocol is in our allowed list
    if (in_array($protocol, $allowedProtocols)) {

        // 4. Use a switch statement to handle the logic for each protocol
        switch ($protocol) {

            // --- CASE FOR I2C ---
            case 'i2c':

                $slaveAddress = filter_input(INPUT_GET, 'slaveAddress', FILTER_VALIDATE_INT, ["options" => ["min_range" => 8, "max_range" => 119]]);
                //TODO: add validation to verify if recived ascii value
                $slaveMessageInput  = $_GET['slaveMessage'];
                // Ensure slaveMessage is either an integer (ASCII code) or a single char
                if (is_numeric($slaveMessageInput)) {
                    $slaveMessage = $slaveMessageInput; // already ASCII code
                } elseif (strlen($slaveMessageInput) === 1) {
                    $slaveMessage = "'" . $slaveMessageInput . "'"; // wrap as char literal
                } else {
                    http_response_code(400);
                    echo "Error: 'slaveMessage' must be a single ASCII char or an integer value.";
                    exit;
                }


                if ($slaveAddress !== false && $slaveMessage !== false) {


                    // Build the generic Arduino code string
                    $arduinoCode = <<<CODE
                    // ===================================================================
                    // Code for: $protocol Protocol
                    // Generated by IOPT API for your '$projectName' project.
                    // All generated code is intended for the net_io file.
                    // Keep in mind if you use this protocol multiple times to implement different events you will get duplicated code, in that case add only what is diferent
                    // ===================================================================

                    // ===================================================================
                    // Code for Slave controller
                    // ===================================================================

                    /*
                    * PART 1: Place this at the top of your file with the other global variables and includes.
                    */
                    #include <Wire.h> 
                    #define I2C_SLAVE_ADDRESS_for_$eventName $slaveAddress // Address for this device
                    #define CMD_TRIGGER_$eventName $slaveMessage // Command to activate the event
                    volatile bool $flagName = 0;
                    void receiveI2CEvent(int byteCount); // Function prototype


                    /*
                    * PART 2: Place this inside your '{$projectName}_InitializeIO()' function.
                    */
                    // Start the I2C bus as a slave with the defined address
                    Wire.begin(I2C_SLAVE_ADDRESS_for_$eventName);
                    // Register the callback function that will be called when receiving data
                    Wire.onReceive(receiveI2CEvent);


                    /*
                    * PART 3: Place this inside your '{$projectName}_GetInputSignals()' function.
                    */
                    if ($flagName == 1) {
                        events->$eventName = 1;
                        $flagName = 0; // Reset the flag to fire only once
                    } else {
                        events->$eventName = 0; // Ensure the event is inactive by default
                    }


                    /*
                    * PART 4: Place this at the bottom of your file with the other helper functions.
                    */
                    void receiveI2CEvent(int byteCount) {
                        if (Wire.available() > 0) {
                            char command = Wire.read();
                            if (command == CMD_TRIGGER_$eventName) {
                                $flagName = 1;
                            }
                        }
                        while (Wire.available() > 0) {
                            Wire.read();
                        }
                    }

                    // ===================================================================
                    // Code for Master controller
                    // ===================================================================


                    /*
                    * PART 1: Place this at the top of your file with the other global variables and includes.
                    */
                    #include <Wire.h> 
                    #define I2C_SLAVE_ADDRESS_for_$eventName $slaveAddress // Address for this device
                    #define CMD_TRIGGER_$eventName $slaveMessage // Command to activate the event
                    void triggerMasterSendSlaveEvent(byte slaveAddress, byte command);


                    /*
                    * PART 2: Place this inside your '{$projectName}_InitializeIO()' function.
                    */
                        while (!Serial); // Wait for Serial to be ready
                        Wire.begin();  // Start the I2C bus as a Master
                        Serial.println("I2C Master Initialized.");


                    /*
                    * PART 3: Place this inside your '{$projectName}_OutputSignals()' function.
                    */
                    if (events->$eventName == 1) {
                        triggerMasterSendSlaveEvent(I2C_SLAVE_ADDRESS_for_$eventName,CMD_TRIGGER_$eventName);
                    }



                    /*
                    * PART 4: Place this at the bottom of your file with the other helper functions.
                    */
                    void triggerMasterSendSlaveEvent(byte slaveAddress, byte command) {
                    Serial.println("Attempting to send command to slave...");

                    // Step 1: Begin a transmission to the I2C slave device
                    Wire.beginTransmission(slaveAddress);

                    // Step 2: Send the command byte
                    Wire.write(command);

                    // Step 3: Stop the transmission and send the data
                    byte error = Wire.endTransmission();

                    // Check the status of the transmission
                    if (error == 0) {
                        Serial.println("Command sent successfully!");
                    } else {
                        Serial.print("Error sending command. Error code: ");
                        Serial.println(error);
                        Serial.println("Check connections and slave address.");
                    }
                    }

                    CODE;

                    echo nl2br(htmlspecialchars($arduinoCode));
                } else {
                    http_response_code(400);
                    echo "Error: For i2c protocol , 'slaveAddress' values accepted between 8-119, 'slaveMessage' values accepted in ascii.";
                }
                break; // End of i2c case

            // --- CASE FOR UART ---

            case 'uart':
                // Global parameters from the main if
                // $projectName is available
                // $eventName is available

                // Validate event name for C++ compatibility
                $isEventNameValid = preg_match('/^[a-zA-Z_][a-zA-Z0-9_]*$/', $eventName);

                if ($isEventNameValid) {

                    // --- Optional Parameters with Safe Defaults ---
                    $serialPort = filter_input(INPUT_GET, 'serialPort', FILTER_VALIDATE_INT, ["options" => ["min_range" => 0, "max_range" => 2]]) ?? 2;
                    // Note: Defaults are set logically (TX of one is RX of the other)
                    $rxPin_receiver = filter_input(INPUT_GET, 'rxPin_receiver', FILTER_VALIDATE_INT) ?? 16;
                    $txPin_receiver = filter_input(INPUT_GET, 'txPin_receiver', FILTER_VALIDATE_INT) ?? 17;
                    $rxPin_sender   = filter_input(INPUT_GET, 'rxPin_sender', FILTER_VALIDATE_INT) ?? 17; 
                    $txPin_sender   = filter_input(INPUT_GET, 'txPin_sender', FILTER_VALIDATE_INT) ?? 16; 

                    $baudRate = filter_input(INPUT_GET, 'baudRate', FILTER_VALIDATE_INT) ?? 115200;

                    // --- Shared UART Message ---
                    $uartMessageContent = $_GET['uartMessage'] ?? "trigger_" . $eventName;
                    $uartMessageName = "message_uart_" . $eventName;


                    $arduinoCode = <<<CODE
            // ===================================================================
            // Code for: $protocol Protocol
            // Generated by IOPT API for your '$projectName' project.
            // All generated code is intended for the net_io file.
            // Keep in mind if you use this protocol multiple times to implement different events you will get duplicated code, in that case add only what is diferent
            // ===================================================================



            // ===================================================================
            // Code for Receiver Controller (listens for event: '$eventName')
            // ===================================================================

            /*
            * PART 1: Place this at the top of your file with the other global variables and includes.
            */
            #include <HardwareSerial.h>

            // -- UART Configuration --
            HardwareSerial MySerial($serialPort);
            #define RXD2 $rxPin_receiver
            #define TXD2 $txPin_receiver

            // -- Message and Flag Definitions --
            const String $uartMessageName = "$uartMessageContent";
            volatile bool $flagName = 0; // flag only for receiving signals

            // -- Function Prototypes --
            void setupUart_$eventName();
            String receiveDataUart();
            void waitMessageUart();

            /*
            * PART 2: Place this inside your '{$projectName}_InitializeIO()' function.
            */
            setupUart_$eventName();

            /*
            * PART 3: Place this inside your '{$projectName}_GetInputSignals()' function.
            */
            waitMessageUart();
            if ($flagName == 1) {
                events->$eventName = 1;
                $flagName = 0; // Reset the flag to fire only once
            } else {
                events->$eventName = 0; // Ensure the event is inactive by default
            }

            /*
            * PART 4: Place this at the bottom of your file with the other helper functions.
            */
            void setupUart_$eventName() {
                MySerial.begin($baudRate, SERIAL_8N1, RXD2, TXD2);
                Serial.println("UART communication initialized (Receiver).");
            }

            String receiveDataUart() {
                if (MySerial.available()) {
                    String data = MySerial.readStringUntil('\\n');
                    data.trim();
                    return data;
                }
                return "";
            }

            void waitMessageUart() {
                String receivedMessage = receiveDataUart();
                if (receivedMessage.length() > 0 && receivedMessage == $uartMessageName) {
                    $flagName = 1;
                    Serial.println("Correct message received. Flag for '$eventName' activated.");
                }
            }


            // ===================================================================
            // Code for Sender Controller (sends event: '$eventName')
            // ===================================================================

            /*
            * PART 1: Place this at the top of your file with the other global variables and includes.
            */
            #include <HardwareSerial.h>

            // -- UART Configuration --
            HardwareSerial MySerial($serialPort);
            #define RXD2 $rxPin_sender
            #define TXD2 $txPin_sender

            // -- Message Definitions --
            const String $uartMessageName = "$uartMessageContent";

            // -- Function Prototypes --
            void setupUart_$eventName();
            void sendDataUart(String message);

            /*
            * PART 2: Place this inside your '{$projectName}_InitializeIO()' function.
            */
            setupUart_$eventName();

            /*
            * PART 3: Place this inside your '{$projectName}_PutOutputSignals()' function.
            */
            if (events->$eventName == 1) {
                sendDataUart($uartMessageName);
                events->$eventName = 0; // IMPORTANT: Reset the event
            }

            /*
            * PART 4: Place this at the bottom of your file with the other helper functions.
            */
            void setupUart_$eventName() {
                MySerial.begin($baudRate, SERIAL_8N1, RXD2, TXD2);
                Serial.println("UART communication initialized (Sender).");
            }

            void sendDataUart(String message) {
                MySerial.println(message);
                Serial.print("Message sent: ");
                Serial.println(message);
            }

            CODE;

                    echo nl2br(htmlspecialchars($arduinoCode));
                } else {
                    http_response_code(400);
                    echo "Error: For 'uart' protocol, valid 'eventName' is required.";
                }
                break; // End of uart case


            // --- CASE FOR TCP ---
            case 'tcp':
                // Validate required TCP parameters
                if (isset($_GET['topic'])) {

                    // Fetch variables
                    $clientID = $_GET['clientID'] ?? "ESP32_IOPT";
                    $clientIdSender = $clientID . "Sender";
                    $topic = $_GET['topic'] ??  "device/events/commands";
                    $broker = $_GET['broker'] ?? "broker.hivemq.com";
                    $port = $_GET['port'] ?? 1883;
                    $ssid = $_GET['ssid'] ?? "yourNetworkName";
                    $password = $_GET['password'] ?? "yourNetworkPassword";

                    // Shared TCP message
                    $tcpMessageContent = $_GET['tcpMessage'] ?? "trigger_" . $eventName;
                    $tcpMessageName = "message_tcp_" . $eventName;

                    $arduinoCode = <<<CODE
        // ===================================================================
        // Code for: $protocol Protocol
        // Generated by IOPT API for your '$projectName' project.
        // All generated code is intended for the net_io file.
        // Keep in mind if you use this protocol multiple times to implement different events you will get duplicated code, in that case add only what is diferent
        // ===================================================================

        // ===================================================================
        // Listener Controller (listens for event: '$eventName')
        // ===================================================================

        /*
        * PART 1: Place at the top with other globals
        */
        #include <WiFi.h>
        #include <PubSubClient.h>

        const char* ssid = "$ssid";
        const char* password = "$password";

        const char* mqtt_broker = "$broker";
        const int mqtt_port = $port;
        const char* client_id = "$clientID";
        const char* topic_sub_$eventName = "$topic";

        const char* $tcpMessageName = "$tcpMessageContent";
        volatile bool $flagName = 0;

        WiFiClient espClient;
        PubSubClient client(espClient);

        void tcpMqttInitializeIO();
        void reconnect(const char* topic);
        void loopDelayTcp(const char* topic);
        void callback(char* topic, byte* payload, unsigned int length);

        /*
        * PART 2: Place inside {$projectName}_InitializeIO()
        */
        tcpMqttInitializeIO();

        /*
        * PART 3: Place inside {$projectName}_GetInputSignals()
        */
        if ($flagName) {
            events->$eventName = 1;
            $flagName = 0;
        } else {
            events->$eventName = 0;
        }

        /*
        * PART 4: Place inside {$projectName}_LoopDelay()
        */
        loopDelayTcp(topic_sub_$eventName);


        /*
        * PART 5: Helper functions (place at the bottom)
        */
        void tcpMqttInitializeIO() {
            Serial.begin(115200);
            WiFi.begin(ssid, password);
            Serial.print("Connecting to WiFi...");
            while (WiFi.status() != WL_CONNECTED) {
                delay(500);
                Serial.print(".");
            }
            Serial.println("\\nWiFi connected!");
            client.setServer(mqtt_broker, mqtt_port);
            client.setCallback(callback);
        }

        void reconnect(const char* topic) {
            while (!client.connected()) {
                Serial.print("Connecting to MQTT broker...");
                if (client.connect(client_id)) {
                    Serial.println("connected!");
                    client.subscribe(topic);
                } else {
                    Serial.print("failed, rc=");
                    Serial.println(client.state());
                    delay(5000);
                }
            }
        }

        void loopDelayTcp(const char* topic) {
            if (!client.connected()) {
                reconnect(topic);
            }
            client.loop();
        }

        void callback(char* topic, byte* payload, unsigned int length) {
            String msg = "";
            for (int i=0; i<length; i++) msg += (char)payload[i];
            msg.trim();
            if (msg == String($tcpMessageName)) {
                $flagName = 1;
                Serial.println("Correct TCP message received. Flag activated for '$eventName'.");
            }
        }


        // ===================================================================
        // Publisher Controller (sends event: '$eventName')
        // ===================================================================

        /*
        * PART 1: Place at the top with other globals
        */
        #include <WiFi.h>
        #include <PubSubClient.h>

        const char* ssid_s = "$ssid";
        const char* password_s = "$password";

        const char* mqtt_broker_s = "$broker";
        const int mqtt_port_s = $port;
        const char* client_id_s = "$clientIdSender";
        const char* topic_pub_$eventName = "$topic";

        const char* $tcpMessageName = "$tcpMessageContent";

        WiFiClient espClient_s;
        PubSubClient client_s(espClient_s);

        void tcpMqttInitializeIO_Sender();
        void reconnectSender(const char* topic);
        void loopDelayTcpSender(const char* topic);
        void sendMessageTcp(const char* topic, const char* message);

        /*
        * PART 2: Place inside {$projectName}_InitializeIO()
        */
        tcpMqttInitializeIO_Sender();

        /*
        * PART 3: Place inside {$projectName}_PutOutputSignals()
        */
        if (events->$eventName == 1) {
            sendMessageTcp(topic_pub_$eventName, $tcpMessageName);
            events->$eventName = 0;
        }

        /*
        * PART 4: Place inside {$projectName}_LoopDelay()
        */
        loopDelayTcp(topic_pub_$eventName);

        /*
        * PART 5: Helper functions (place at the bottom)
        */
        void tcpMqttInitializeIO_Sender() {
            Serial.begin(115200);
            WiFi.begin(ssid_s, password_s);
            Serial.print("Connecting to WiFi...");
            while (WiFi.status() != WL_CONNECTED) {
                delay(500);
                Serial.print(".");
            }
            Serial.println("\\nWiFi connected!");
            client_s.setServer(mqtt_broker_s, mqtt_port_s);
        }

        void reconnectSender(const char* topic) {
            while (!client_s.connected()) {
                Serial.print("Connecting to MQTT broker...");
                if (client_s.connect(client_id_s)) {
                    Serial.println("connected!");
                } else {
                    Serial.print("failed, rc=");
                    Serial.println(client_s.state());
                    delay(5000);
                }
            }
        }

        void loopDelayTcpSender(const char* topic) {
            if (!client_s.connected()) {
                reconnectSender(topic);
            }
            client_s.loop();
        }

        void sendMessageTcp(const char* topic, const char* message) {
            Serial.print("Event detected! Publishing to topic: ");
            Serial.println(topic);
            client_s.publish(topic, message);
        }
        CODE;

                    echo nl2br(htmlspecialchars($arduinoCode));
                } else {
                    http_response_code(400);
                    echo "Error: For TCP, parameters required: 'topic' other values: 'clientID',  'broker', 'port', 'ssid', 'password' are not mandatory but can be passed in the endpont";
                }
                break;
        }
    } else {
        // Handle the case where the protocol is not in the allowed list
        http_response_code(400);
        echo "Error: Invalid protocol specified. Must be one of: " . implode(', ', $allowedProtocols);
    }
} else {
    // Handle the case where no protocol is provided at all
    http_response_code(400);
    echo "Error: The 'protocol' parameter, 'projectName' parameter and 'eventName' parameters are are required and must be present.";
}
